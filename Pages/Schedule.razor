@page "/schedule"
@inject AppointmentService AppointmentService
@inject IJSRuntime JSRuntime

<h4>📅 Pregled rasporeda</h4>

<div id="calendar" style="width: 100%; height: 600px; max-width: 1200px; margin: auto;"></div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}

@code {
    private List<Appointment> Appointments = new();
    private string? errorMessage = null;
    private DotNetObjectReference<Schedule>? dotNetRef;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            dotNetRef = DotNetObjectReference.Create(this);
            await RefreshCalendar();
        }
        catch (Exception ex)
        {
            errorMessage = "❌ Greška pri učitavanju termina: " + ex.Message;
        }
    }

    [JSInvokable]
    public async Task RefreshCalendar()
    {
        Appointments = await AppointmentService.GetAppointmentsAsync();

        var bookedAppointments = Appointments.Select(a => new
        {
            id = a.Id,
            title = $"{a.Name} - {a.ServiceType} (by {a.CreatedBy})",
            start = a.AppointmentDateTime.ToString("yyyy-MM-dd HH:mm"),
            end = a.AppointmentDateTime.AddMinutes(GetServiceDuration(a.ServiceType)).ToString("yyyy-MM-dd HH:mm")
        }).ToList();

        await JSRuntime.InvokeVoidAsync("initFullCalendar", dotNetRef, bookedAppointments);
    }

    [JSInvokable]
    public async Task EditAppointment(int appointmentId, string newStart)
    {
        var appointment = Appointments.FirstOrDefault(a => a.Id == appointmentId);
        if (appointment == null) return;

        if (DateTime.TryParse(newStart, out DateTime startDateTime))
        {
            appointment.AppointmentDateTime = startDateTime;
            bool success = await AppointmentService.UpdateAppointmentAsync(appointment);
            if (success)
            {
                await RefreshCalendar();
            }
        }
    }

    [JSInvokable]
    public async Task CancelAppointment(int appointmentId)
    {
        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Jeste li sigurni da želite otkazati ovaj termin?");
            if (!confirmed)
            {
                return;
            }

            bool success = await AppointmentService.CancelAppointmentAsync(appointmentId);
            if (success)
            {
                Appointments = await AppointmentService.GetAppointmentsAsync();
                await RefreshCalendar();
            }
            else
            {
                errorMessage = "❌ Greška: Termin nije pronađen.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "❌ Greška prilikom otkazivanja termina: " + ex.Message;
        }
    }

    private int GetServiceDuration(string serviceType)
    {
        return serviceType switch
        {
            "Šminkanje" => 120,
            "Lash Lift" => 60,
            "Brow Lift" => 60,
            "Ekstenzije trepavica" => 90,
            _ => 60
        };
    }
}
